*** Settings ***
Library           Selenium2Library

*** Keywords ***
_parseQueryStringToArray
    [Arguments]    ${queryStr}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    解析QueryString格式(AA=aa&BB=bb)的字符串，转换成数组形式
    ...
    ...    *参数说明：*
    ...
    ...    queryStr: 要解析的字符串，格式为AA=aa&BB=bb，如果key和value中本身包含=，则需用*eq*代替
    ...
    ...    *返回值说明：*
    ...
    ...    keyArr: key对应的数组，格式为['AA','BB']
    ...
    ...    valueArr: value对应的数组，格式为['aa','bb']
    ${keyAndValueArr}    evaluate    u'${queryStr}'.split('&')
    ${arrCount}    evaluate    len(${keyAndValueArr})
    ${keyArr}    evaluate    '['
    ${valueArr}    evaluate    '['
    : FOR    ${i}    IN RANGE    ${arrCount}
    \    ${value}    evaluate    u'${keyAndValueArr[${i}]}'.split('=')[1]
    \    ${keyArr}    run keyword if    '${value}' != '[NULL]'    evaluate    u"${keyArr}" + "'" + u"${keyAndValueArr[${i}]}".split('=')[0] + "'" + ','    ELSE
    \    ...    evaluate    u'${keyArr}'
    \    ${valueArr}    run keyword if    '${value}' != '[NULL]'    evaluate    u"${valueArr}" + "'" + u"${keyAndValueArr[${i}]}".split('=')[1] + "'" + ','    ELSE
    \    ...    evaluate    u'${valueArr}'
    ${keyArr}    evaluate    u"${keyArr}".rstrip(',').replace('*eq*','=') + ']'
    ${valueArr}    evaluate    u"${valueArr}".rstrip(',').replace('*eq*','=') + ']'
    [Return]    ${keyArr}    ${valueArr}

_getTableRowCount
    [Arguments]    ${tableId}
    [Documentation]    *功能：*
    ...
    ...    获取一个Table元素的行数
    ...
    ...    *参数说明：*
    ...
    ...    tableId:Table元素的Id
    ...
    ...    *返回值说明：*
    ...
    ...    rowCount: table元素总行数(包括标题行和数据行)
    ${rowCount}    _myExecuteJS    var tableId='${tableId}';var table=window.document.getElementById(tableId);if(!table){return'0|||封装提示信息：不存在id为"'+tableId+'"的Table元素，请检查是否传入正确的tableId或者进入了正确的iframe';}return'1|||'+table.rows.length;
    [Return]    ${rowCount}

_parseQueryStringToSplitString
    [Arguments]    ${queryStr}    ${splitStr}=
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    解析QueryString格式(AA=aa&BB=bb)的字符串，转换成分割字符串形式
    ...
    ...    *参数说明：*
    ...
    ...    queryStr: 要解析的字符串，格式为AA=aa&BB=bb，如果key和value中本身包含=，则需用*eq*代替
    ...
    ...    splitStr: 分隔符，如果不传此参数，则默认值用|分割；否则，用指定的分隔符分隔
    ...
    ...    *返回值说明：*
    ...
    ...    keyStr: key对应的分割字符串，格式为AA|BB
    ...
    ...    valueStr: value对应的分割字符串，格式为aa|bb
    ${keyAndValueArr}    evaluate    u'${queryStr}'.split('&')
    ${arrCount}    evaluate    len(${keyAndValueArr})
    ${keyStr}    evaluate    ''
    ${valueStr}    evaluate    ''
    ${splitStr}    run keyword if    '${splitStr}' == ''    Evaluate    '|'    ELSE    Evaluate
    ...    '${splitStr}'
    : FOR    ${i}    IN RANGE    ${arrCount}
    \    ${value}    evaluate    u'${keyAndValueArr[${i}]}'.split('=')[1]
    \    ${keyStr}    run keyword if    '${value}' != '[NULL]'    evaluate    u"${keyStr}" + u"${keyAndValueArr[${i}]}".split('=')[0] + '${splitStr}'    ELSE
    \    ...    Evaluate    u'${keyStr}'
    \    ${valueStr}    run keyword if    '${value}' != '[NULL]'    evaluate    u"${valueStr}" + u"${keyAndValueArr[${i}]}".split('=')[1] + '${splitStr}'    ELSE
    \    ...    Evaluate    u'${valueStr}'
    ${keyStr}    evaluate    u'${keyStr}'[:-1].replace('*eq*','=')
    ${valueStr}    evaluate    u'${valueStr}'[:-1].replace('*eq*','=')
    [Return]    ${keyStr}    ${valueStr}

_checkTabelCellIsEditable
    [Arguments]    ${tableId}    ${rowIndex}    ${columnIndex}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    检查表格单元格是否可以编辑
    ...
    ...    *参数说明：*
    ...
    ...    tableId ：table元素的id
    ...
    ...    rowIndex : 行索引(从0开始)
    ...
    ...    columnIndex ：列索引(从0开始)
    ...
    ...    *返回值说明：*
    ...
    ...    isEditable ： 1 ：可编辑 0：不可编辑
    ${isEditable}    _myExecuteJS    var tableId='${tableId}';var table=window.document.getElementById(tableId);if(!table){return'0|||封装提示信息：不存在id为"'+tableId+'"的Table元素，请检查是否传入正确的tableId或者进入了正确的iframe';}var rowIndex=${rowIndex};var columnIndex=${columnIndex};var cell=table.rows[rowIndex].cells[columnIndex];var inputs=cell.getElementsByTagName('input');for(var i=0;i<inputs.length;i++){var readonly=inputs[i].readOnly;var disabled=inputs[i].disabled;if(!readonly&&!disabled){return'1|||1';}}var selects=cell.getElementsByTagName('select');for(var i=0;i<selects.length;i++){var disabled=selects[i].disabled;if(!disabled){return'1|||1';}}var imgs=cell.getElementsByTagName('img');for(var i=0;i<imgs.length;i++){var disabled=imgs[i].disabled;if(!disabled&&(imgs[i].onclick||imgs[i].className.indexOf('AGE_Sel')>-1)){return'1|||1';}}return'1|||0';
    [Return]    ${isEditable}

_runJSViaClickButton
    [Arguments]    ${jsCode}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    动态生成一个button，将指定的js代码绑定到button的click事件上面，然后通过点击按钮的方式执行js代码
    ...
    ...    *参数说明：*
    ...
    ...    jsCode ：要执行的js代码片段
    Run Keyword And Ignore Error    Execute Javascript    var button=window.document.getElementById('rfs_MyButton');if(button)window.document.body.removeChild(button);
    Execute Javascript    var button=document.createElement('input');button.type='button';button.id='rfs_MyButton';button.value='RFS Button';button.onclick=function(){${jsCode}};window.document.body.insertBefore(button,window.document.body.firstChild);
    click button    rfs_MyButton

_runJSFile
    [Arguments]    ${jsFileName}    ${args}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    执行js文件
    ...
    ...    *参数说明：*
    ...
    ...    jsFileName ：js文件名
    ...
    ...    args : 传递给js文件的参数(json对象格式)
    ...
    ...    *返回值说明：*
    ...
    ...    returnValue ： js代码的返回值
    Execute Javascript    window.args=eval("(${args})");
    ${returnValue}    Execute Javascript    ${CURDIR}/${jsFileName}
    [Return]    ${returnValue}

_getCurrentIframe
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    获取当前窗口的Iframe名称
    ...
    ...    *返回值说明：*
    ...
    ...    iframe ： 当前窗口所在的iframe
    ${iframe}    Execute Javascript    if(window.frameElement && window.frameElement.id){return window.frameElement.id;}return '';
    [Return]    ${iframe}

_getParentIframe
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    获取当前窗口的父级Iframe名称(包括从顶级开始的路径)
    ...
    ...    *返回值说明：*
    ...
    ...    parentIframePath： 当前窗口所在的父级iframe
    ${parentIframePath}    Execute Javascript    var currentWin=parent;var parentPathArr=[];var parentPathStr='';while(currentWin&&currentWin!=top){parentPathArr.push(currentWin.frameElement.id);currentWin=currentWin.parent;}var temp;while(temp=parentPathArr.pop()){parentPathStr+=temp+'/';}if(parentPathStr!=''){parentPathStr=parentPathStr.substr(0,parentPathStr.length-1);}return parentPathStr;
    [Return]    ${parentIframePath}

_myExecuteJS
    [Arguments]    ${jsCode}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    执行js代码，并分析返回值。如果返回异常，提示异常信息并终止testcase执行。
    ...
    ...    *参数：*
    ...
    ...    jsCode：要执行的js代码
    ...
    ...    *返回值说明：*
    ...
    ...    returnValue ： js返回值
    ${result}    Execute Javascript    ${jsCode}
    Return From Keyword If    '${result}' == 'None'
    ${resultArr}    Evaluate    u'${result}'.split('|||')
    ${returnStatus}    Evaluate    ${resultArr}[0]
    ${returnMessage}    Evaluate    ${resultArr}[1]
    ${returnValue}    run keyword if    '${returnStatus}' == '1'    Evaluate    u'${returnMessage}'
    run keyword if    '${returnStatus}' == '0'    fail    ${returnMessage}
    [Return]    ${returnValue}

_buildBatchLocatorAndInputVars
    [Arguments]    ${locatorAndInputData}    ${locatorColumnNames}    ${inputColumnNames}    ${rowFilterCondition}=    ${splitStr}=
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成批量编辑多行的定位字符串和输入字符串
    ...
    ...    *参数说明：*
    ...
    ...    locatorAndInputData : 用来定位行及要输入的数据，是一个二维数组，数组的第一个元素是列头集合,其他元素为数据行。格式如下：
    ...
    ...    [['columnA','columnB','columnC','columnD'],[23,'aa','bb',100],[55,'cc','dd',200]]
    ...
    ...
    ...    locatorColumnNames ：用于定位的列头集合，列与列之间用&连接，如columnA&columnB
    ...
    ...    inputColumnNames ：需要输入值的列头集合，列与列之间用&连接，如columnC&columnD
    ...
    ...    rowFilterCondition：过滤数据记录条件，格式为 columnA=value1&columnB=value2；默认值为空，表示所有数据行。
    ...
    ...    splitStr：字符串连接分隔符，默认为空，标识用|分割
    ...
    ...    *返回值说明：*
    ...
    ...    locatorColumnNamesAndValues：用于定位的字符串列表，记录之间用分隔符分割。比如：
    ...
    ...    columnA=12&columnB=34|columnC=tt&columnD=34ss（分隔符为|）
    ...
    ...    inputColumnNamesAndValues：用于输入的字符串列表，记录之间用分隔符分割。比如：
    ...
    ...    columnE=12&columnF=34^columnE=tt&columnF=34ss（分隔符为^）
    ${splitStr}    run keyword if    '${splitStr}'==''    Evaluate    '|'    ELSE    Evaluate
    ...    '${splitStr}'
    ${titleArr}    Evaluate    ${locatorAndInputData}[0]
    ${dataLen}    Evaluate    len(${locatorAndInputData})
    ${locatorTitleArr}    Evaluate    u'${locatorColumnNames}'.split('&')
    ${inputTitleArr}    Evaluate    u'${inputColumnNames}'.split('&')
    ${locatorColumnNamesAndValuesList}    Evaluate    ''
    ${inputColumnNamesAndValuesList}    Evaluate    ''
    : FOR    ${i}    IN RANGE    1    ${dataLen}
    \    ${checkDataRowMatched}    _checkDataRowMatched    ${titleArr}    ${locatorAndInputData}[${i}]    ${rowFilterCondition}
    \    ${locatorColumnNamesAndValues}    ${inputColumnNamesAndValues}    run keyword if    '${checkDataRowMatched}'=='1'    _buildOneLocatorAndInputVar    ${titleArr}
    \    ...    ${locatorTitleArr}    ${inputTitleArr}    ${locatorAndInputData}[${i}]
    \    ${locatorColumnNamesAndValuesList}    run keyword if    '${checkDataRowMatched}'=='1' and '${locatorColumnNamesAndValues}' != ''    Evaluate    u'${locatorColumnNamesAndValuesList}'+u'${locatorColumnNamesAndValues}'+'${splitStr}'    ELSE
    \    ...    Evaluate    u'${locatorColumnNamesAndValuesList}'
    \    ${inputColumnNamesAndValuesList}    run keyword if    '${checkDataRowMatched}'=='1' and '${inputColumnNamesAndValues}' != ''    Evaluate    u'${inputColumnNamesAndValuesList}'+u'${inputColumnNamesAndValues}'+'${splitStr}'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValuesList}'
    ${locatorColumnNamesAndValuesList}    Evaluate    u'${locatorColumnNamesAndValuesList}'[:-1]
    ${inputColumnNamesAndValuesList}    Evaluate    u'${inputColumnNamesAndValuesList}'[:-1]
    [Return]    ${locatorColumnNamesAndValuesList}    ${inputColumnNamesAndValuesList}

_buildOneLocatorAndInputVar
    [Arguments]    ${titleArr}    ${locatorTitleArr}    ${inputTitleArr}    ${dataRow}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成一条编辑行的定位字符串和输入字符串
    ...
    ...    *参数说明：*
    ...
    ...    titleArr : 所有列头集合
    ...
    ...    locatorTitleArr ：用于定位的列头集合
    ...
    ...    inputTitleArr ：需要输入值的列头集合
    ...
    ...    dataRow : 数据行
    ...
    ...    *返回值说明：*
    ...
    ...    locatorColumnNamesAndValues：用于定位的字符串列表，如：
    ...
    ...    columnA=12&columnB=34
    ...
    ...    inputColumnNamesAndValues：用于输入的字符串列表，如：
    ...
    ...    columnE=12&columnF=34
    ${locatorTitleArrLen}    Evaluate    len(${locatorTitleArr})
    ${locatorColumnNamesAndValues}    Evaluate    ''
    : FOR    ${i}    IN RANGE    ${locatorTitleArrLen}
    \    ${locatorTitle}    Evaluate    ${locatorTitleArr}[${i}]
    \    ${elementIndex}    Evaluate    ${titleArr}.index(u'${locatorTitle}')
    \    ${columnValue}    Evaluate    ${dataRow}[${elementIndex}]
    \    ${columnValueArr}    Evaluate    u'${columnValue}'.split('^^')
    \    ${columnValueArrLen}    Evaluate    len(${columnValueArr})
    \    ${columnValue}    run keyword if    '${columnValueArrLen}'=='2'    Evaluate    ${columnValueArr}[0]    ELSE
    \    ...    Evaluate    u'${columnValue}'
    \    ${locatorTitle}    Evaluate    u'${locatorTitle}'.replace('=','*eq*')
    \    ${columnValue}    Evaluate    u'${columnValue}'.replace('=','*eq*')
    \    ${locatorColumnNamesAndValues}    run keyword if    '${columnValue}' != '[NULL]'    Evaluate    u'${locatorColumnNamesAndValues}'+u'${locatorTitle}'+'='+u'${columnValue}'+'&'    ELSE
    \    ...    Evaluate    u'${locatorColumnNamesAndValues}'
    ${locatorColumnNamesAndValues}    Evaluate    u'${locatorColumnNamesAndValues}'[:-1]
    ${inputTitleArrLen}    Evaluate    len(${inputTitleArr})
    ${inputColumnNamesAndValues}    Evaluate    ''
    : FOR    ${i}    IN RANGE    ${inputTitleArrLen}
    \    ${inputTitle}    Evaluate    ${inputTitleArr}[${i}]
    \    ${elementIndex}    Evaluate    ${titleArr}.index(u'${inputTitle}')
    \    ${columnValue}    Evaluate    ${dataRow}[${elementIndex}]
    \    ${columnValueArr}    Evaluate    u'${columnValue}'.split('^^')
    \    ${columnValueArrLen}    Evaluate    len(${columnValueArr})
    \    ${columnValue}    run keyword if    '${columnValueArrLen}'=='2'    Evaluate    ${columnValueArr}[1]    ELSE
    \    ...    Evaluate    u'${columnValue}'
    \    ${inputTitle}    Evaluate    u'${inputTitle}'.replace('=','*eq*')
    \    ${columnValue}    Evaluate    u'${columnValue}'.replace('=','*eq*')
    \    ${inputColumnNamesAndValues}    run keyword if    '${columnValue}' != '[NULL]'    Evaluate    u'${inputColumnNamesAndValues}'+u'${inputTitle}'+'='+u'${columnValue}'+'&'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValues}'
    ${inputColumnNamesAndValues}    Evaluate    u'${inputColumnNamesAndValues}'[:-1]
    [Return]    ${locatorColumnNamesAndValues}    ${inputColumnNamesAndValues}

_buildBatchInputVars
    [Arguments]    ${inputData}    ${locatorColumnNames}    ${rowFilterCondition}    ${splitStr}=
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成批量编辑多行的输入字符串
    ...
    ...    *参数说明：*
    ...
    ...    inputData : 要输入的数据，是一个二维数组，数组的第一个元素是列头集合,其他元素为数据行。格式如下：
    ...
    ...    [['columnA','columnB','columnC','columnD'],[23,'aa','bb',100],[55,'cc','dd',200]]
    ...
    ...    locatorColumnNames:用于定位的列名，列名之间用&连接
    ...
    ...    rowFilterCondition：过滤数据记录条件，格式为 columnA=value1&columnB=value2；默认值为空，表示所有数据行。
    ...
    ...    splitStr：字符串连接分隔符
    ...
    ...    *返回值说明：*
    ...
    ...    inputColumnNamesAndValuesList：用于输入的字符串列表，记录之间用|分割。比如：
    ...
    ...    columnE=12&columnF=34|columnE=tt&columnF=34ss
    ${splitStr}    run keyword if    '${splitStr}'==''    Evaluate    '|'    ELSE    Evaluate
    ...    '${splitStr}'
    ${inputTitleArr}    Evaluate    ${inputData}[0]
    ${dataLen}    Evaluate    len(${inputData})
    ${inputColumnNamesAndValuesList}    Evaluate    ''
    ${locatorTitleArr}    run keyword if    '${locatorColumnNames}' == ''    Evaluate    list(${inputTitleArr})    ELSE    Evaluate
    ...    u'${locatorColumnNames}'.split('&')
    : FOR    ${i}    IN RANGE    1    ${dataLen}
    \    ${checkDataRowMatched}    _checkDataRowMatched    ${inputTitleArr}    ${inputData}[${i}]    ${rowFilterCondition}
    \    ${inputColumnNamesAndValues}    run keyword if    '${checkDataRowMatched}'=='1'    _buildOneInputVar    ${inputTitleArr}    ${inputData}[${i}]
    \    ...    ${locatorTitleArr}
    \    ${inputColumnNamesAndValuesList}    run keyword if    '${checkDataRowMatched}'=='1' and '${inputColumnNamesAndValues}' != ''    Evaluate    u'${inputColumnNamesAndValuesList}'+u'${inputColumnNamesAndValues}'+'${splitStr}'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValuesList}'
    ${inputColumnNamesAndValuesList}    Evaluate    u'${inputColumnNamesAndValuesList}'[:-1]
    [Return]    ${inputColumnNamesAndValuesList}

_buildOneInputVar
    [Arguments]    ${inputTitleArr}    ${dataRow}    ${locatorTitleArr}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成一条编辑行的输入字符串
    ...
    ...    *参数说明：*
    ...
    ...    inputTitleArr ：需要输入值的列头集合
    ...
    ...    dataRow : 数据行
    ...
    ...    locatorTitleArr:用于定位的列名集合
    ...
    ...    *返回值说明：*
    ...
    ...    inputColumnNamesAndValues：用于输入的字符串列表，如：columnE=12&columnF=34
    ${locatorTitleArrLen}    Evaluate    len(${locatorTitleArr})
    ${inputColumnNamesAndValues}    Evaluate    ''
    : FOR    ${i}    IN RANGE    ${locatorTitleArrLen}
    \    ${locatorTitle}    Evaluate    ${locatorTitleArr}[${i}]
    \    ${locatorTitleIndex}    Evaluate    ${inputTitleArr}.index(u'${locatorTitle}')
    \    ${columnValue}    Evaluate    ${dataRow}[${locatorTitleIndex}]
    \    ${locatorTitle}    Evaluate    u'${locatorTitle}'.replace('=','*eq*')
    \    ${columnValue}    Evaluate    u'${columnValue}'.replace('=','*eq*')
    \    ${inputColumnNamesAndValues}    run keyword if    '${columnValue}' != '[NULL]'    Evaluate    u'${inputColumnNamesAndValues}'+u'${locatorTitle}'+'='+u'${columnValue}'+'&'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValues}'
    ${inputColumnNamesAndValues}    Evaluate    u'${inputColumnNamesAndValues}'[:-1]
    [Return]    ${inputColumnNamesAndValues}

_buildBatchInputVars_containRowNumberColumn
    [Arguments]    ${inputData}    ${rowNumberColumnName}    ${inputColumnNames}    ${rowFilterCondition}    ${splitStr}=
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成批量编辑多行的输入字符串（数据数组中包含序号字段）
    ...
    ...    *参数说明：*
    ...
    ...    inputData : 要输入的数据，是一个二维数组，数组的第一个元素是列头集合,其他元素为数据行。格式如下：
    ...
    ...    [['columnA','columnB','columnC','columnD'],[23,'aa','bb',100],[55,'cc','dd',200]]
    ...
    ...
    ...    rowNumberColumnName：序号列对应的列名
    ...
    ...    inputColumnNames：需要输入的列头集合，列与列之间用&连接，如columnC&columnD；为空表示除了序号列之外所有列
    ...
    ...    rowFilterCondition：过滤数据记录条件，格式为 columnA=value1&columnB=value2；默认值为空，表示所有数据行。
    ...
    ...    splitStr：字符串连接分隔符
    ...
    ...    *返回值说明：*
    ...
    ...    inputColumnNamesAndValuesList：用于输入的字符串列表，记录之间用分隔符分割。比如：
    ...
    ...    columnE=12&columnF=34|columnE=tt&columnF=34ss
    ...
    ...    rowNumberList：序号集合，序号与序号之间用分隔符分割
    ${splitStr}    run keyword if    '${splitStr}'==''    Evaluate    '|'    ELSE    Evaluate
    ...    '${splitStr}'
    ${inputTitleArr}    Evaluate    ${inputData}[0]
    ${dataLen}    Evaluate    len(${inputData})
    ${inputColumnNamesAndValuesList}    Evaluate    ''
    ${rowNumberList}    Evaluate    ''
    : FOR    ${i}    IN RANGE    1    ${dataLen}
    \    ${checkDataRowMatched}    _checkDataRowMatched    ${inputTitleArr}    ${inputData}[${i}]    ${rowFilterCondition}
    \    ${inputColumnNamesAndValues}    ${rowNumber}    run keyword if    '${inputColumnNames}' != '' and '${checkDataRowMatched}'=='1'    _buildOneInputVar_containRowNumberColumn    ${inputTitleArr}
    \    ...    ${rowNumberColumnName}    ${inputData}[${i}]    ${inputColumnNames}    ELSE IF    '${inputColumnNames}' == '' and '${checkDataRowMatched}'=='1'
    \    ...    _buildOneInputVar_containRowNumberColumn_allInputColumn    ${inputTitleArr}    ${rowNumberColumnName}    ${inputData}[${i}]
    \    ${inputColumnNamesAndValuesList}    run keyword if    '${checkDataRowMatched}'=='1' and '${inputColumnNamesAndValues}' != ''    Evaluate    u'${inputColumnNamesAndValuesList}'+u'${inputColumnNamesAndValues}'+'${splitStr}'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValuesList}'
    \    ${rowNumberList}    run keyword if    '${checkDataRowMatched}'=='1' and '${rowNumber}' != ''    Evaluate    u'${rowNumberList}'+u'${rowNumber}'+'${splitStr}'    ELSE
    \    ...    Evaluate    u'${rowNumberList}'
    ${inputColumnNamesAndValuesList}    Evaluate    u'${inputColumnNamesAndValuesList}'[:-1]
    ${rowNumberList}    Evaluate    u'${rowNumberList}'[:-1]
    [Return]    ${inputColumnNamesAndValuesList}    ${rowNumberList}

_buildOneInputVar_containRowNumberColumn
    [Arguments]    ${inputTitleArr}    ${rowNumberCoumnName}    ${dataRow}    ${inputColumnNames}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成一条编辑行的输入字符串（数据中包含序号信息）
    ...
    ...    *参数说明：*
    ...
    ...    inputTitleArr ：需要输入值的列头集合
    ...
    ...    rowNumberCoumnName：序号列列名
    ...
    ...    dataRow : 数据行
    ...
    ...    inputColumnNames：需要输入的列头集合，列与列之间用&连接，如columnC&columnD；
    ...
    ...    *返回值说明：*
    ...
    ...    inputColumnNamesAndValues：用于输入的字符串列表，如：columnE=12&columnF=34
    ...
    ...    rowNumber：序号
    ${inputColumnNamesAndValues}    Evaluate    ''
    ${rowNumberColumnIndex}    Evaluate    ${inputTitleArr}.index(u'${rowNumberCoumnName}')
    ${rowNumber}    Evaluate    ${dataRow}[${rowNumberColumnIndex}]
    ${rowNumber}    Evaluate    u'${rowNumber}'.replace('[NULL]','')
    ${inputColumnNameArr}    Evaluate    u'${inputColumnNames}'.split('&')
    ${inputColumnNameArrLen}    Evaluate    len(${inputColumnNameArr})
    : FOR    ${i}    IN RANGE    ${inputColumnNameArrLen}
    \    ${inputColumnName}    Evaluate    ${inputColumnNameArr}[${i}]
    \    ${inputColumnIndex}    Evaluate    ${inputTitleArr}.index(u'${inputColumnName}')
    \    ${columnValue}    Evaluate    ${dataRow}[${inputColumnIndex}]
    \    ${inputColumnName}    Evaluate    u'${inputColumnName}'.replace('=','*eq*')
    \    ${columnValue}    Evaluate    u'${columnValue}'.replace('=','*eq*')
    \    ${inputColumnNamesAndValues}    run keyword if    '${columnValue}' != '[NULL]'    Evaluate    u'${inputColumnNamesAndValues}'+u'${inputColumnName}'+'='+u'${columnValue}'+'&'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValues}'
    ${inputColumnNamesAndValues}    Evaluate    u'${inputColumnNamesAndValues}'[:-1]
    [Return]    ${inputColumnNamesAndValues}    ${rowNumber}

_buildOneInputVar_containRowNumberColumn_allInputColumn
    [Arguments]    ${inputTitleArr}    ${rowNumberCoumnName}    ${dataRow}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    生成一条编辑行的输入字符串（数据中包含序号信息）
    ...
    ...    *参数说明：*
    ...
    ...    inputTitleArr ：需要输入值的列头集合
    ...
    ...    rowNumberCoumnName：序号列列名
    ...
    ...    dataRow : 数据行
    ...
    ...    *返回值说明：*
    ...
    ...    inputColumnNamesAndValues：用于输入的字符串列表，如：columnE=12&columnF=34
    ...
    ...    rowNumber：序号
    ${inputColumnNamesAndValues}    Evaluate    ''
    ${rowNumberColumnIndex}    Evaluate    ${inputTitleArr}.index(u'${rowNumberCoumnName}')
    ${rowNumber}    Evaluate    ${dataRow}[${rowNumberColumnIndex}]
    ${rowNumber}    Evaluate    u'${rowNumber}'.replace('[NULL]','')
    ${inputTitleArrLen}    Evaluate    len(${inputTitleArr})
    : FOR    ${i}    IN RANGE    ${inputTitleArrLen}
    \    ${inputTitle}    Evaluate    ${inputTitleArr}[${i}]
    \    ${columnValue}    Evaluate    ${dataRow}[${i}]
    \    ${inputColumnNamesAndValues}    run keyword if    '${inputTitle}' != '${rowNumberCoumnName}' and '${columnValue}' != '[NULL]'    Evaluate    u'${inputColumnNamesAndValues}'+u'${inputTitle}'.replace('=','*eq*')+'='+u'${columnValue}'.replace('=','*eq*')+'&'    ELSE
    \    ...    Evaluate    u'${inputColumnNamesAndValues}'
    ${inputColumnNamesAndValues}    Evaluate    u'${inputColumnNamesAndValues}'[:-1]
    [Return]    ${inputColumnNamesAndValues}    ${rowNumber}

_checkDataRowMatched
    [Arguments]    ${titleArr}    ${dataRow}    ${rowFilterCondition}
    [Documentation]    ====内部方法，不对外使用====
    ...
    ...    *功能：*
    ...
    ...    检测数据行是否满足过滤条件
    ...
    ...    *参数说明：*
    ...
    ...    titleArr ：标题列头集合
    ...
    ...    dataRow : 数据行
    ...
    ...    rowFilterCondition：数据行过滤条件
    ...
    ...    *返回值说明：*
    ...
    ...    isMatched ：是否满足条件 1：满足 0：不满足
    Return From Keyword If    '${rowFilterCondition}'==''    1
    ${splitStr}    Evaluate    '^'
    ${keyStr}    ${valueStr}    _parseQueryStringToSplitString    ${rowFilterCondition}    ${splitStr}
    ${keyArr}    Evaluate    u'${keyStr}'.split('${splitStr}')
    ${valueArr}    Evaluate    u'${valueStr}'.split('${splitStr}')
    ${keyArrLen}    Evaluate    len(${valueArr})
    ${checkSum}    Evaluate    '0'
    : FOR    ${i}    IN RANGE    ${keyArrLen}
    \    ${key}    Evaluate    ${keyArr}[${i}]
    \    ${valueContidion}    Evaluate    ${valueArr}[${i}]
    \    ${columnIndex}    Evaluate    ${titleArr}.index(u'${key}')
    \    ${valueDataRow}    Evaluate    ${dataRow}[${columnIndex}]
    \    ${checkSum}    run keyword if    '${valueDataRow}' == '${valueContidion}'    Evaluate    int('${checkSum}')+1    ELSE
    \    ...    Evaluate    int('${checkSum}')
    ${isMatched}    run keyword if    '${checkSum}' == '${keyArrLen}'    Evaluate    '1'    ELSE    Evaluate
    ...    '0'
    [Return]    ${isMatched}

_checkTwoDimensionArrayContainsData
    [Arguments]    ${twoDimensionArray}
    [Documentation]    *功能：*
    ...
    ...    检测二维数组是否除了标题之外还包含其它数据
    ...
    ...    *参数说明：*
    ...
    ...    titleArr ：标题列头集合
    ...
    ...    dataRow : 数据行
    ...
    ...    rowFilterCondition：数据行过滤条件
    ...
    ...    *返回值说明：*
    ...
    ...    isContainData ：数组是否包含数据 1：包含数据行 \ 0：不包含数据行
    ${arrayLen}    Evaluate    len(${twoDimensionArray})
    Return From Keyword If    ${arrayLen} < 2    0
    ${columnLen}    Evaluate    len(${twoDimensionArray}[0])
    ${from}    Evaluate    int(${columnLen})
    ${to}    Evaluate    int(${arrayLen})*int(${columnLen})
    ${nullCount}    Evaluate    0
    : FOR    ${i}    IN RANGE    ${from}    ${to}
    \    ${currentRowIndex}    Evaluate    ${i}/${columnLen}
    \    ${currentFieldIndex}    Evaluate    ${i}%${columnLen}
    \    ${value}    Evaluate    ${twoDimensionArray}[${currentRowIndex}][${currentFieldIndex}]
    \    ${nullCount}    run keyword if    '${value}' == '[NULL]'    Evaluate    int(${nullCount}) + 1    ELSE
    \    ...    Evaluate    int(${nullCount})
    ${expectedNullCount}    Evaluate    (int(${arrayLen})-1)*${columnLen}
    ${isContainData}    run keyword if    '${expectedNullCount}' == '${nullCount}'    Evaluate    0    ELSE    Evaluate
    ...    1
    [Return]    ${isContainData}
